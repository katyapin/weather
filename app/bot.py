from data import db
from settings import bot, sched
from services import geocoder, weather, notices
from telebot import types
from datetime import datetime, timedelta
import keys


def main_menu():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"))
    keyboard.add(types.KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"))
    keyboard.add(types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"))
    return keyboard


def request_loc_btns():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button_geo)
    return keyboard


def main_menu_message(message, user):
    answer = 'üìç %s\nüîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s\n\n‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è'
    if user['notice_time']:
        notices = '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ' + str(user['notice_time']).rjust(2, '0') + ':00'
    else:
        notices = '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
    answer = answer % (user['city'], notices)
    btn = main_menu()
    bot.send_message(message.chat.id, answer, reply_markup=btn)


def time_keys():
    keyboard = types.InlineKeyboardMarkup(row_width=3)

    for i in range(8):
        num = i * 3
        t1 = str(num).rjust(2, '0') + ':00'
        t2 = str(num+1).rjust(2, '0') + ':00'
        t3 = str(num+2).rjust(2, '0') + ':00'
        btn1 = types.InlineKeyboardButton(text=t1, callback_data='set_notice_'+t1)
        btn2 = types.InlineKeyboardButton(text=t2, callback_data='set_notice_'+t2)
        btn3 = types.InlineKeyboardButton(text=t3, callback_data='set_notice_'+t3)
        keyboard.add(btn1, btn2, btn3)

    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='set_notice_cancel'))
    return keyboard


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = db.get_user(message.chat.id)
    if user:
        main_menu_message(message, user)
    else:
        db.create_user(message.chat.id)
        answer = '–Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ë–£–î–£–©–ï–ï...\n–Ω—É –ø–æ–≥–æ–¥—É.\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ '\
                 '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.'
        btn = request_loc_btns()
        bot.register_next_step_handler(message, change_localion)
        bot.send_message(message.chat.id, answer, reply_markup=btn)


@bot.message_handler(func=lambda msg: msg.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
def set_schedule(message):
    answer = '–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø–æ–ª—É—á–∞—Ç—å'
    bot.send_message(message.chat.id, answer, reply_markup=time_keys())


@bot.message_handler(func=lambda msg: msg.text == '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
def change_city(message):
    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    bot.send_message(message.chat.id, answer, reply_markup=request_loc_btns())
    bot.register_next_step_handler(message, change_localion)


@bot.message_handler(func=lambda msg: msg.text == '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑')
def get_forecast(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data='day_today'))
    keyboard.add(types.InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data='day_tomorrow'))
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å'
    bot.send_message(message.chat.id, answer, reply_markup=keyboard)


def err_city_message(message):
    answer = '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ—Ä–æ–¥ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'
    bot.send_message(message.chat.id, answer, reply_markup=request_loc_btns())


def change_localion(message):
    if message.location:
        lon, lat = message.location.longitude, message.location.latitude
        city = geocoder.get_city_by_coordinates(lon, lat)
        if not city:
            err_city_message(message)
            return
    else:
        city_text = message.text
        result = geocoder.get_coorditates_by_city(city_text)
        if not result:
            err_city_message(message)
            return
        lon, lat, city = result

    db.set_user_coords(message.chat.id, lon, lat, city)
    user = db.get_user(message.chat.id)
    main_menu_message(message, user)


@bot.callback_query_handler(func=lambda call: call.data.startswith('day'))
def choose_day(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    day = call.data.split('_')[1]

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text="–Ø–Ω–¥–µ–∫—Å", callback_data='source_'+day+'_yandex_choice'))
    keyboard.add(types.InlineKeyboardButton(text="–ì–∏—Å–º–µ—Ç–µ–æ", callback_data='source_'+day+'_gismeteo_choice'))

    answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫'
    bot.send_message(call.message.chat.id, answer, reply_markup=keyboard)



@bot.callback_query_handler(func=lambda call: call.data.startswith('source'))
def choose_source(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    call_data = call.data.split('_')
    day = call_data[1]
    source = call_data[2]
    last = call_data[-1]
    if last == 'choice':
        db.update_user_choices(call.message.chat.id, source)
        cur_part = None
    else:
        cur_part = last

    dt = datetime.today()
    if day == 'tomorrow':
        dt = dt + timedelta(days=1)

    user = db.get_user(call.message.chat.id)
    answer, part = weather.get_weather(user['lon'], user['lat'], user['city'], dt, source, cur_part)
    keyboard = keys.get_parts_keys(part, source, day)
    bot.send_message(call.message.chat.id, answer, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_notice_'))
def set_notice(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    time = call.data.split('_')[-1]
    if time == 'cancel':
        db.set_user_notice(call.message.chat.id, None)
        answer = '–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    else:
        time_int = int(time.split(':')[0])
        db.set_user_notice(call.message.chat.id, time_int)
        answer = '–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s' % (time)
    bot.send_message(call.message.chat.id, answer)


if __name__ == '__main__':
    notices.send_notices()
    # sched.add_job(notices.send_notices, 'cron', hour='0-23')
    # sched.start()
    bot.infinity_polling()
